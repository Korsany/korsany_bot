from random import randint as rint
from time import sleep as slp

import qrcode
import g4f
import pyfiglet

from aiogram import Router, F
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.types import Message
from aiogram.types import (Message, FSInputFile, InlineKeyboardMarkup,
                           InlineKeyboardButton)
from aiogram.enums import ParseMode

import main
import config
from keyboards import inline

router = Router()
bot = main.bot

ml_admin = [5193123666, 6854009493, 6536683594]


@router.message(CommandStart())
async def start(message: Message):
    await message.answer(f'''
<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, @{message.from_user.username} üëã</b>\n –£–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /help''')
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–∞–Ω–¥—ã /help
@router.message(Command('help'))
async def start(message: Message):
    await message.answer(f'''
<b>–£ –º–µ–Ω—è –µ—Å—Ç—å –º–Ω–æ–≥–æ –∫—Ä—É—Ç—ã—Ö –∫–æ–º–º–∞–Ω–¥!</b>
/rn x-y; –Ω–∞–ø—Ä–∏–º–µ—Ä /rn 1-100
    –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç x –¥–æ y!
/play —Ü–∏—Ñ—Ä–∞ –æ—Ç 1 –¥–æ 6
    –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏!
/qrcode –õ—é–±–æ–π —Ç–µ–∫—Å—Ç
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç qrcode –∏–∑ —Ç–µ–∫—Å—Ç–∞
/link –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç-–¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ-–°—Å—ã–ª–∫–∞
    –ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π!
/gpt –í–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è ChatGPT
    –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å    ChatGPT(–∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!)
/gpt_ru –í–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è ChatGPT
    –ë–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –∏ –∫–æ–¥–µ—Ä–æ–≤!
–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!
/p_message –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    –û—Ç–ø—Ä–∞–≤–ª–∏—Ç—å —Å–æ–æ–±—â–Ω–∏–µ –≤ –ª—Å —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞!''')


@router.message(Command(commands=['private_message', 'p_message']))
async def start(message: Message, command: CommandObject, bot: bot):
    if command.args == None:
        await message.reply('–í—ã –Ω–µ –ø—Ä–∞–≤–µ–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É!')
    else:
        await bot.send_message(chat_id="-1002008657754",
                                                     text=f'''–°–æ–æ–±—â–µ–Ω–∏–µ: {command.args}
<b>–ò–Ω—Ñ–∞ –æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ!</b>
username: <b>{message.from_user.username}</b>;
ID: <b>{message.from_user.id}</b>''')
        await message.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ!')


@router.message(Command('admin_m'))
async def admin_m_command(message: Message, command: CommandObject):
    data = command.args
    data = data.split('=')
    a1 = data[0]
    a2 = data[1]
    if message.from_user.id in ml_admin:
        await bot.send_message(chat_id=a1, text=a2)
        await message.answer('üí≠–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ!üí≠')
    elif a1 == None or a2 == None:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤–µ—Ä–Ω–æ!:\n/admin_m id=—Ç–µ–∫—Å—Ç')
    else:
        await message.answer('üÜò–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!üÜò')


@router.message(Command(commands=['rn', 'random-number']))    # /rn 1-100
async def get_random_number(message: Message, command: CommandObject):
    if command.args == None:
       await message.answer('–£–∫–∞–∂–∏—Ç–µ –∞–≥—Ä—É–º–µ–Ω—Ç—ã! –ü—Ä–∏–º–µ—Ä:\n/rn 1-100')
    else:
      a, b = [int(n) for n in command.args.split('-')]    # [1, 100]
      rnum = rint(a, b)

      await message.reply(f'–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ: {rnum}')


@router.message(Command('play', prefix='!/.'))
async def play_games(message: Message, command: CommandObject):
    x = await message.answer_dice(DiceEmoji.DICE)
    print(x.dice.value)
    slp(2.7)
    if command.args == None:
        await message.answer(
                '–í—ã –Ω–µ–ø—Ä–∞–≤–µ–ª–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–º–∞–Ω–¥—É!\n –ü—Ä–∏–º–µ—Ä –∫–æ–º–º–∞–Ω–¥—ã:\n /play 5')
    else:
        if int(x.dice.value) == int(command.args):
            await message.answer(
                    f'–í—ã–ø–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {int(x.dice.value)}, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!')
        elif int(x.dice.value) != int(command.args):
            await message.answer(
                    f'–í—ã–ø–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {int(x.dice.value)}, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')


@router.message(F.text.lower() == 'play')
async def play_games(message: Message):
    x = await message.answer_dice(DiceEmoji.DICE)
    print(x.dice.value)
    await message.answer(f'–ó–Ω–∞—á–µ–Ω–∏–µ: {x.dice.value}')


@router.message(Command('arg'))
async def arg(message: Message, command: CommandObject):
    data = command.args
    data = data.split()
    a1 = data[0]
    a2 = data[1]
    await message.answer(f'1-–π: {a1}')
    await message.answer(f'2-–π: {a2}')


'''@router.message(Command('file'))
async def arg(message: Message, command: CommandObject):
        if command.args == None:
                await message.answer('–ù–∞–¥–æ —É–∫–∞–∑–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç - /file –∏–º—è —Ñ–∞–π–ª–∞!')
        elif command.args == 'game':
                game = FSInputFile("Ded_moroz.zip")
            result = await message.answer_document(
            filename='Ded_moroz.zip',
            caption='–ò–≥—Ä–∞ –ø—Ä–æ –¥–µ–¥–∞ –º–æ—Ä–æ–∑–∞!üéÖ')
    else:
        await message.answer('–¢–∞–∫–æ–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!')'''


@router.message(Command('qrcode'))
async def all_message(message: Message, command: CommandObject):
  if command.args == None:
    await message.reply(text="–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞—Ä–∫—É–º–µ–Ω—Ç!")
  else:
    texts = command.args
    img = qrcode.make(texts)
    img.save("qrcode.png")

    file_ids = []
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    image_from_pc = FSInputFile("qrcode.png")
    if message.text:
      result = await message.answer_photo(image_from_pc,
                                          caption=texts,
                                          reply_markup=inline.kanal)
    else:
      await message.reply(
          text="–ò–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫, —Å—Ç–∏–∫–µ—Ä–æ–≤, —Å–º–∞–π–ª–∏–∫–æ–≤, gif –∏ –≤–∏–¥–µ–æ qr-–∫–æ–¥—ã –Ω–µ –¥–µ–ª–∞—é!"
      )


@router.message(Command('link'))
async def link_command(message: Message, command: CommandObject):
  data = command.args
  data = data.split('-')
  a1 = data[0]
  a2 = data[1]
  a3 = data[2]

  if data == None:
    await message.answer("–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–º–∞–Ω–¥—É, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ /help!")
  elif a2 == None:
    await message.answer("–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–º–∞–Ω–¥—É, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ /help!")
  elif a3 == None:
    await message.answer("–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–º–∞–Ω–¥—É, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ /help!")
  else:
    links = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=a2, url=a3)]])
    await message.answer(text=a1, reply_markup=links)


@router.message(Command('font'))
async def link_command(message: Message, command: CommandObject):
  argument = command.args
  font = pyfiglet.figlet_format(argument)
  await message.reply(font + "  ")


@router.message(Command('gpt'))
async def handle_message(message: Message, command: CommandObject):
  if command.args == None:
    await message.answer("–í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å ChatGPT!")
  else:
    user_message = command.args
    slp(1)
    await message.reply(
        '–ò–º–º–µ–π—Ç–µ –≤ –≤–∏–¥—É, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è ChatGPT –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –µ—Å–ª–∏ ChatGPT –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 1 –º–∏–Ω—É—Ç—ã, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /gpr_ru'
    )
    response = await g4f.ChatCompletion.create_async(
        model=g4f.models.gpt_35_turbo,
        messages=[{
            "role": "user",
            "content": user_message
        }])
    await message.reply(response)


@router.message(Command('gpt_ru'))
async def handle_message(message: Message, command: CommandObject):
  if command.args == None:
    await message.answer("–í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å ChatGPT!")
  else:
    user_message = command.args
    slp(1)
    await message.answer('–ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å...')
    response = await g4f.ChatCompletion.create_async(
        model=g4f.models.gpt_35_turbo,
        messages=[{"role": "user", "content": user_message + ' (–û—Ç–≤–µ—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!)'}])
    response = response.replace('!', '\!').replace('?', '\?').replace('.', '\.').replace(',', '\,').replace(':', '\:')
    await message.bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id+1, text=f'{response}', parse_mode=ParseMode.MARKDOWN_V2)
    #await message.reply(response, parse_mode=ParseMode.MARKDOWN_V2)


@router.message(Command('file'))
async def arg(message: Message, command: CommandObject):
  if command.args == None:
    await message.answer('–ù–∞–¥–æ —É–∫–∞–∑–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç - /file –∏–º—è —Ñ–∞–π–ª–∞!')
  elif command.args == 'game':
    game = FSInputFile("Ded_moroz.zip")
    result = await message.answer_document(document=game,
                                           caption='–ò–≥—Ä–∞ –ø—Ä–æ –¥–µ–¥–∞ –º–æ—Ä–æ–∑–∞!üéÖ')
  else:
    await message.answer('–¢–∞–∫–æ–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!')


@router.message(Command('copy'))
async def copy_command(message: Message, command: CommandObject):
  #await message.copy_to(message.chat.id, command.args)
  await message.reply(command.args)
